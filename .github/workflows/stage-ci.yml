

name: stage-ci
on:
  push:
    branches: [stage]
  pull_request:
    branches: [stage]

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      #This sets up our env for dotnet to download packages etc
      # targeting the .net 8 version 
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x'}
      # Do our unit tests w
      - name: Unit Testing
        run: dotnet test ./TacomaTrivia.UnitTests/TacomaTrivia.UnitTests.csproj -c Release  -v minimal 

  integration:
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with: {dotnet-version: '8.0.x'}

      - name: Integration tests
        run: dotnet test ./TacomaTrivia.IntegrationTests/TacomaTrivia.IntegrationTests.csproj -c Release -v minimal
  
  #on my pc that has the service, the local account is now running the service
   # --- 3) Build FE -> wwwroot, publish API, build+run Docker on self-hosted Windows ---
  deploy:
    # Match your Windows self-hosted runner labels exactly
    
    runs-on: [self-hosted, Windows, X64]
    needs: [unit, integration]

    # Grants access to ENV-scoped secrets (set up in Settings â†’ Environments)
    environment:
      name: TacomaTrivia_Postgres_ConnectionString
    
  # Use Windows PowerShell safely; no ExecutionPolicy override; no profile scripts
    defaults:
      run:
        shell: cmd

    steps:
      # Check out fresh copy onto the runner's workspace
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          
     
      # ----- Frontend build -----
      # Installs Node on the Windows box for building the SPA
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Build your Vite frontend and output directly into the API's wwwroot
      - name: Create wwwroot folder if not existing
        run: |
          set "API_WWWROOT=../TacomaTrivia.Api/wwwroot"
          IF NOT EXIST ../TacomaTrivia_Onion/TacomaTrivia.Api/wwwroot\ (
            echo Creating ../TacomaTrivia_Onion/TacomaTrivia.Api/wwwroot
            mkdir "%API_WWWROOT%"
          )

      - name: Build Vite frontend into API wwwroot
        working-directory: ./tacomatrivia-frontend 
        run: |
          set "API_WWWROOT=../TacomaTrivia.Api/wwwroot"
          npm ci
          npm run build -- --outDir "%API_WWWROOT%"

        rem Sanity: ensure index.html exists after build
          IF NOT EXIST "%API_WWWROOT%\index.html" (
            echo Contents of "%API_WWWROOT%" 
            dir /a "%API_WWWROOT%"
            echo FE build did not produce "%API_WWWROOT%\index.html"
            exit /b 1
          ) 
      # ----- Backend publish -----
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Publish the API into a local folder we can COPY into the image
      - name: Publish API
        run: |
          IF NOT EXIST .\publish\Api\ (
            echo Creating .\publish\Api
            mkdir .\publish\Api
          )
          dotnet restore ./TacomaTrivia.Api/TacomaTrivia.Api.csproj
          dotnet publish ./TacomaTrivia.Api/TacomaTrivia.Api.csproj -c Release -o .\publish\Api
          IF NOT EXIST .\publish\Api\wwwroot\index.html (
            echo Publish output tree:
            dir /s /b .\publish\Api
            echo Publish output missing wwwroot\index.html
            exit /b 1
          )
          

      # ----- Docker build -----
      # Build a small runtime image using the already published output
      - name: Docker build image
        run: |
          docker build -t tacomatrivia:stage -f ./TacomaTrivia.Api/Dockerfile.runtime .

      # ----- Replace running container -----
      - name: Stop old container (ignore if missing)
        run: docker rm -f tacomatrivia-stage 2>$null || exit 0

      # Run new container with environment secrets injected at runtime
      # IMPORTANT:
      #  - The environment variable name "ConnectionStrings__Default" follows .NET's section__key mapping.
      #  - Your API should read it via builder.Configuration["ConnectionStrings:Default"].
      - name: Run container (inject secrets)
        env:
          # Pull the environment-scoped secret into the step's environment
          DB_CONN: ${{ secrets.STAGE_DB_CONNECTION_STRING }}
        run: |
          docker run -d --name tacomatrivia-stage ^
            -p 5141:5141 ^
            --restart unless-stopped ^
            -e "ConnectionStrings__Default=$env:DB_CONN" ^
            tacomatrivia:stage

      # (Optional) Show container status and where the app is listening
      - name: Verify container
        run: |
          docker ps --filter "name=tacomatrivia-stage"

#Deleted old container that had this app
# stopped tacoma pg db container

#Deleted both images to make sure we get a clean re-install

# all of that may have been for naught as I had the folder open using
#vs code on that machine

#Nope turns out the issue might have been a rogue terminal pointing to
#that folder and causing the hangup